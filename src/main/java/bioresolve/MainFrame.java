package bioresolve;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.time.Duration;
import java.util.List;
import java.util.Locale;
import java.util.Set;

public class MainFrame extends JFrame {
    private JTextArea reactionsTextArea;
    private JPanel mainPanel;
    private JTextArea environmentTextArea;
    private JTextArea contextTextArea;
    private JButton computeFinalResultButton;
    private JLabel outLabel;
    private JCheckBox showResultsCheckBox;
    private final List<JTextArea> textAreas;

    public MainFrame() {
        setContentPane(mainPanel);
        setTitle("BioResolve");
        setMinimumSize(new Dimension(900, 500));
        setResizable(false);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setVisible(true);

        ButtonListener bl = new ButtonListener();
        reactionsTextArea.getDocument().addDocumentListener(bl);
        environmentTextArea.getDocument().addDocumentListener(bl);
        contextTextArea.getDocument().addDocumentListener(bl);

        textAreas = List.of(reactionsTextArea, environmentTextArea, contextTextArea);

        computeFinalResultButton.addActionListener(e -> {
            try {
                if (showResultsCheckBox.isSelected()) BioResolve.OUT = true; // Enable computation steps output
                else BioResolve.OUT = false;

                String reactionsString = reactionsTextArea.getText();

                Reaction.checkReactionStringConformity(reactionsString);

                Set<Entity> S = Entity.extrapolateEntitiesFromReactionsString(reactionsString);

                Set<Reaction> A = Reaction.parseReactions(reactionsString);

                ReactionSystem RS = new ReactionSystem(S, A);

                String environment = environmentTextArea.getText();
                String context = contextTextArea.getText();

                List<Context> parGamma = Context.parseParallel(context);
                Environment env = new Environment(environment);

                List<InteractiveProcess> pi = InteractiveProcess.createParallelProcesses(env, parGamma);

                ManagersCoordinator.setRS(RS);
                ManagersCoordinator coordinator = ManagersCoordinator.getInstance();

                coordinator.spawnManager(pi);
                coordinator.getLastManager().bindManagerToProcesses();

                Duration totalTime = coordinator.compute();

                outLabel.setVisible(true);
                outLabel.setForeground(new Color(0, 153, 51));
                outLabel.setText("Computed in " + (float) totalTime.toNanos() / 1000000000 + "s");

                coordinator.resetCoordinator(); // Resets the coordinator allowing subsequent executions
            } catch (IllegalArgumentException ex) {
                outLabel.setVisible(true);
                outLabel.setForeground(Color.RED);
                outLabel.setText(String.valueOf(ex));
            }
        });
    }

    private void checkTextAreasFilled() {
        if (contextTextArea.getText().isBlank() || reactionsTextArea.getText().isBlank()) {
            computeFinalResultButton.setEnabled(false);
            return;
        }

        computeFinalResultButton.setEnabled(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, -1, 14, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Insert the reactions:");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(label1, gbc);
        reactionsTextArea = new JTextArea();
        Font reactionsTextAreaFont = this.$$$getFont$$$(null, -1, 14, reactionsTextArea.getFont());
        if (reactionsTextAreaFont != null) reactionsTextArea.setFont(reactionsTextAreaFont);
        reactionsTextArea.setLineWrap(true);
        reactionsTextArea.setText("");
        reactionsTextArea.setToolTipText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.gridwidth = 6;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(reactionsTextArea, gbc);
        final JLabel label2 = new JLabel();
        Font label2Font = this.$$$getFont$$$(null, -1, 14, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setText("Insert the environment:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(label2, gbc);
        environmentTextArea = new JTextArea();
        Font environmentTextAreaFont = this.$$$getFont$$$(null, -1, 14, environmentTextArea.getFont());
        if (environmentTextAreaFont != null) environmentTextArea.setFont(environmentTextAreaFont);
        environmentTextArea.setLineWrap(true);
        environmentTextArea.setToolTipText("");
        environmentTextArea.setWrapStyleWord(true);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 6;
        gbc.gridwidth = 6;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(environmentTextArea, gbc);
        final JLabel label3 = new JLabel();
        Font label3Font = this.$$$getFont$$$(null, -1, 14, label3.getFont());
        if (label3Font != null) label3.setFont(label3Font);
        label3.setText("Insert the context:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 8;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(label3, gbc);
        contextTextArea = new JTextArea();
        Font contextTextAreaFont = this.$$$getFont$$$(null, -1, 14, contextTextArea.getFont());
        if (contextTextAreaFont != null) contextTextArea.setFont(contextTextAreaFont);
        contextTextArea.setLineWrap(true);
        contextTextArea.setToolTipText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 9;
        gbc.gridwidth = 6;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(contextTextArea, gbc);
        outLabel = new JLabel();
        Font outLabelFont = this.$$$getFont$$$(null, -1, 14, outLabel.getFont());
        if (outLabelFont != null) outLabel.setFont(outLabelFont);
        outLabel.setText("");
        outLabel.setVisible(false);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 11;
        gbc.weightx = 1.0;
        mainPanel.add(outLabel, gbc);
        computeFinalResultButton = new JButton();
        computeFinalResultButton.setEnabled(false);
        Font computeFinalResultButtonFont = this.$$$getFont$$$(null, -1, 14, computeFinalResultButton.getFont());
        if (computeFinalResultButtonFont != null) computeFinalResultButton.setFont(computeFinalResultButtonFont);
        computeFinalResultButton.setText("Compute final result");
        computeFinalResultButton.setVisible(true);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 13;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(computeFinalResultButton, gbc);
        showResultsCheckBox = new JCheckBox();
        Font showResultsCheckBoxFont = this.$$$getFont$$$(null, -1, 14, showResultsCheckBox.getFont());
        if (showResultsCheckBoxFont != null) showResultsCheckBox.setFont(showResultsCheckBoxFont);
        showResultsCheckBox.setText("Show output");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 13;
        gbc.anchor = GridBagConstraints.EAST;
        mainPanel.add(showResultsCheckBox, gbc);
        final JLabel label4 = new JLabel();
        Font label4Font = this.$$$getFont$$$(null, -1, 26, label4.getFont());
        if (label4Font != null) label4.setFont(label4Font);
        label4.setText("Wellcome to BioResolve");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 6;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.NORTH;
        mainPanel.add(label4, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    private class ButtonListener implements DocumentListener {
        @Override
        public void changedUpdate(DocumentEvent documentEvent) {
            checkTextAreasFilled();
        }

        @Override
        public void insertUpdate(DocumentEvent documentEvent) {
            checkTextAreasFilled();
        }

        @Override
        public void removeUpdate(DocumentEvent documentEvent) {
            checkTextAreasFilled();
        }
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }
}
